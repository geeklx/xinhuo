package com.spark.peak.utlis

/**
 * <pre>
 * author: Blankj
 * blog  : http://blankj.com
 * time  : 2016/8/11
 * desc  : 常量相关工具类
</pre> *
 */
class ConstUtils private constructor() {

    init {
        throw UnsupportedOperationException("u can't fuck me...")
    }

    companion object {

        /******************** 存储相关常量  */
        /**
         * Byte与Byte的倍数
         */
        val BYTE = 1
        /**
         * KB与Byte的倍数
         */
        val KB = 1024
        /**
         * MB与Byte的倍数
         */
        val MB = 1048576
        /**
         * GB与Byte的倍数
         */
        val GB = 1073741824

        /******************** 时间相关常量  */
        /**
         * 毫秒与毫秒的倍数
         */
        val MSEC = 1
        /**
         * 秒与毫秒的倍数
         */
        val SEC = 1000
        /**
         * 分与毫秒的倍数
         */
        val MIN = 60000
        /**
         * 时与毫秒的倍数
         */
        val HOUR = 3600000
        /**
         * 天与毫秒的倍数
         */
        val DAY = 86400000

        /******************** 正则相关常量  */
        /**
         * 正则：手机号（简单）
         */
        val REGEX_MOBILE_SIMPLE = "^[1]\\d{10}$"
        /**
         * 正则：手机号（精确）
         *
         * 移动：134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、178、182、183、184、187、188
         *
         * 联通：130、131、132、145、155、156、175、176、185、186
         *
         * 电信：133、153、173、177、180、181、189
         *
         * 全球星：1349
         *
         * 虚拟运营商：170
         */
        val REGEX_MOBILE_EXACT = "^((13[0-9])|(14[5,7])|(15[0-3,5-8])|(17[0,3,5-8])|(18[0-9])|(147))\\d{8}$"
        /**
         * 正则：电话号码
         */
        val REGEX_TEL = "^0\\d{2,3}[- ]?\\d{7,8}"
        /**
         * 正则：身份证号码15位
         */
        val REGEX_IDCARD15 = "^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$"
        /**
         * 正则：身份证号码18位
         */
        val REGEX_IDCARD18 = "^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9Xx])$"
        /**
         * 正则：邮箱
         */
        val REGEX_EMAIL = "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"
        /**
         * 正则：URL
         */
        val REGEX_URL = "http(s)?://([\\w-]+\\.)+[\\w-]+(/[,\\w-./?%&=]*)?"
        /**
         * 正则：汉字
         */
        val REGEX_CHZ = "^[\\u4e00-\\u9fa5]+$"
        /**
         * 正则：用户名，取值范围为a-z,A-Z,0-9,"_",汉字，不能以"_"结尾,用户名必须是6-20位
         */
        val REGEX_USERNAME = "^[\\w\\u4e00-\\u9fa5]{6,20}(?<!_)$"
        /**
         * 正则：yyyy-MM-dd格式的日期校验，已考虑平闰年
         */
        val REGEX_DATE = "^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$"
        /**
         * 正则：IP地址
         */
        val REGEX_IP = "((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)"
        /**
         * 正则：密码
         */
        val PASSWORD = "([\\s\\S]){6,20}$"
    }
}